{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"diaspora-service","text":"<p>TODOs</p> <ul> <li>action provider code</li> <li>action provider basic tests</li> <li>web service code</li> <li> <p>web service basic tests</p> </li> <li> <p>pre commit</p> </li> <li> <p>add docs along the way</p> </li> </ul>"},{"location":"deployment/","title":"Deployment","text":""},{"location":"deployment/#testing-in-virtual-environment","title":"Testing in Virtual Environment","text":""},{"location":"deployment/#action-provider","title":"Action Provider","text":"<p>To test the Action Provider in a virtual environment, run the main script:</p> <pre><code>python action_provider/main.py\n</code></pre>"},{"location":"deployment/#web-service","title":"Web Service","text":"<p>To test the Web Service in a virtual environment, use the following command to start the server:</p> <pre><code>uvicorn web_service.main:app --host 0.0.0.0 --port 8000 --reload\n</code></pre>"},{"location":"deployment/#testing-in-docker-container","title":"Testing in Docker Container","text":""},{"location":"deployment/#action-provider_1","title":"Action Provider","text":"<p>To build and run the Action Provider in a Docker container:</p> <ol> <li> <p>Define environment variables:</p> <pre><code>SERVICE_NAME=diaspora-action-provider\nCONTAINER_NAME=container\nDOCKERFILE_PATH=action_provider/Dockerfile\n</code></pre> </li> <li> <p>Build the Docker image:</p> <pre><code>docker build -t $CONTAINER_NAME -f $DOCKERFILE_PATH .\n</code></pre> </li> <li> <p>Run the container:</p> <pre><code>docker run -p 8000:8000 $CONTAINER_NAME\n</code></pre> </li> </ol>"},{"location":"deployment/#web-service_1","title":"Web Service","text":"<p>To build and run the Web Service in a Docker container:</p> <ol> <li> <p>Define environment variables:</p> <pre><code>SERVICE_NAME=diaspora-web-service\nCONTAINER_NAME=container\nDOCKERFILE_PATH=web_service/Dockerfile\n</code></pre> </li> <li> <p>Build the Docker image:</p> <pre><code>docker build -t $CONTAINER_NAME -f $DOCKERFILE_PATH .\n</code></pre> </li> <li> <p>Run the container:</p> <pre><code>docker run -p 8000:8000 $CONTAINER_NAME\n</code></pre> </li> </ol>"},{"location":"deployment/#deploy-through-github-actions","title":"Deploy through GitHub Actions","text":"<p>A push or merge to the <code>main</code> branch automatically triggers AWS Lightsail Docker deployments. See the workflow file lightsail.yml. This action is partially adapted from fdiesel/github-action-deploy-aws-lightsail-container.</p>"},{"location":"deployment/#deploy-from-a-local-environment","title":"Deploy from a Local Environment","text":"<p>To deploy from a local environment, first build the Docker containers using the commands provided above. Then, use the following commands to push the images to AWS Lightsail and deploy them.</p> <ol> <li> <p>Delete old container images:</p> <pre><code>output=$(aws lightsail get-container-images --service-name $SERVICE_NAME --no-paginate --output text)\ncontainer_names=($(echo \"$output\" | awk '{print $NF}'))\nfor name in \"${container_names[@]:1}\"; do\n    echo \"IMAGE TO DELETE: $name\"\n    aws lightsail delete-container-image --region us-east-1 --service-name $SERVICE_NAME --image \"$name\" || true\ndone\n</code></pre> </li> <li> <p>Idempotently create Lightsail container service:</p> <pre><code>aws lightsail create-container-service --region us-east-1 --service-name $SERVICE_NAME --power small --scale 1 || true\n</code></pre> </li> <li> <p>Push Docker image to Lightsail and deploy:</p> <pre><code>output=$(aws lightsail push-container-image --region us-east-1 --service-name $SERVICE_NAME --label $CONTAINER_NAME --image $CONTAINER_NAME)\nimage_name=$(echo \"$output\" | sed -n 's/.*Refer to this image as \"\\(.*\\)\" in deployments.*/\\1/p')\n\necho \"IMAGE NAME: $image_name\"\n\ncontainers=$(jq -n --arg image_name \"$image_name\" '{\n    \"flask\": {\n        \"image\": $image_name,\n        \"ports\": {\n            \"8000\": \"HTTP\"\n        }\n    }\n}')\n\npublic_endpoint=$(jq -n '{\n    \"containerName\": \"flask\",\n    \"containerPort\": 8000\n}')\n\naws lightsail create-container-service-deployment --region us-east-1 \\\n    --service-name $SERVICE_NAME \\\n    --containers \"$containers\" \\\n    --public-endpoint \"$public_endpoint\"\n</code></pre> </li> </ol>"}]}