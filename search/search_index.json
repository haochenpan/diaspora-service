{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Diaspora Service","text":"<p>TODOs</p> <ul> <li>action provider code</li> <li> <p>web service code</p> </li> <li> <p>web service basic tests</p> </li> <li> <p>action provider basic tests</p> </li> <li> <p>add docs along the way</p> </li> </ul>"},{"location":"1-running/","title":"Running","text":""},{"location":"1-running/#running-in-virtual-environment","title":"Running in Virtual Environment","text":""},{"location":"1-running/#action-provider","title":"Action Provider","text":"<p>To test the Action Provider in a virtual environment, run the main script:</p> <pre><code>source secrets.sh\npython action_provider/main.py\n</code></pre>"},{"location":"1-running/#web-service","title":"Web Service","text":"<p>To test the Web Service in a virtual environment, use the following command to start the server:</p> <pre><code>source secrets.sh\nuvicorn web_service.main:app --host 0.0.0.0 --port 8000 --reload\n</code></pre>"},{"location":"1-running/#running-in-docker-container","title":"Running in Docker Container","text":""},{"location":"1-running/#action-provider_1","title":"Action Provider","text":"<p>To build and run the Action Provider in a Docker container:</p> <ol> <li> <p>Define environment variables:</p> <pre><code>SERVICE_NAME=diaspora-action-provider\nCONTAINER_NAME=container\nDOCKERFILE_PATH=action_provider/Dockerfile\n</code></pre> </li> <li> <p>Build the Docker image:</p> <pre><code>docker build -t $CONTAINER_NAME -f $DOCKERFILE_PATH .\n</code></pre> </li> <li> <p>Run the container:</p> <pre><code>source secrets.sh\ndocker run -p 8000:8000 \\\n-e AWS_ACCESS_KEY_ID \\\n-e AWS_SECRET_ACCESS_KEY \\\n-e CLIENT_ID \\\n-e CLIENT_SECRET \\\n-e CLIENT_SCOPE \\\n-e DEFAULT_SERVERS \\\n$CONTAINER_NAME\n</code></pre> </li> </ol>"},{"location":"1-running/#web-service_1","title":"Web Service","text":"<p>To build and run the Web Service in a Docker container:</p> <ol> <li> <p>Define environment variables:</p> <pre><code>SERVICE_NAME=diaspora-web-service\nCONTAINER_NAME=container\nDOCKERFILE_PATH=web_service/Dockerfile\n</code></pre> </li> <li> <p>Build the Docker image:</p> <pre><code>docker build -t $CONTAINER_NAME -f $DOCKERFILE_PATH .\n</code></pre> </li> <li> <p>Run the container:</p> <pre><code>source secrets.sh\ndocker run -p 8000:8000 \\\n-e AWS_ACCESS_KEY_ID \\\n-e AWS_SECRET_ACCESS_KEY \\\n-e SERVER_CLIENT_ID \\\n-e SERVER_SECRET \\\n$CONTAINER_NAME\n</code></pre> </li> </ol>"},{"location":"2-testing/","title":"Testing","text":""},{"location":"2-testing/#testing-in-virtual-environment","title":"Testing in Virtual Environment","text":""},{"location":"2-testing/#action-provider","title":"Action Provider","text":"<p>To test the Action Provider in a virtual environment, run:</p> <pre><code>pytest tests/action_provider_test.py\n</code></pre>"},{"location":"2-testing/#web-service","title":"Web Service","text":"<p>To test the Web Service in a virtual environment, run:</p> <pre><code>pytest tests/web_service_test.py\n</code></pre>"},{"location":"3-deploying/","title":"Deployment","text":""},{"location":"3-deploying/#deploy-through-github-actions","title":"Deploy through GitHub Actions","text":"<p>A push or merge to the <code>main</code> branch automatically triggers AWS Lightsail Docker deployments. See the workflow file lightsail.yml. This action is partially adapted from fdiesel/github-action-deploy-aws-lightsail-container.</p>"},{"location":"3-deploying/#deploy-from-a-local-environment","title":"Deploy from a Local Environment","text":"<p>To deploy from a local environment, first build the Docker containers using the commands provided above. Then, use the following commands to push the images to AWS Lightsail and deploy them.</p> <ol> <li> <p>Delete old container images:</p> <pre><code>output=$(aws lightsail get-container-images --service-name $SERVICE_NAME --no-paginate --output text)\ncontainer_names=($(echo \"$output\" | awk '{print $NF}'))\nfor name in \"${container_names[@]:1}\"; do\n    echo \"IMAGE TO DELETE: $name\"\n    aws lightsail delete-container-image --region us-east-1 --service-name $SERVICE_NAME --image \"$name\" || true\ndone\n</code></pre> </li> <li> <p>Idempotently create Lightsail container service:</p> <pre><code>aws lightsail create-container-service --region us-east-1 --service-name $SERVICE_NAME --power small --scale 1 || true\n</code></pre> </li> <li> <p>Push Docker image to Lightsail:</p> <pre><code>output=$(aws lightsail push-container-image --region us-east-1 --service-name $SERVICE_NAME --label $CONTAINER_NAME --image $CONTAINER_NAME)\nimage_name=$(echo \"$output\" | sed -n 's/.*Refer to this image as \"\\(.*\\)\" in deployments.*/\\1/p')\n\necho \"IMAGE NAME: $image_name\"\n</code></pre> </li> <li> <p>Deploy the Docker image:</p> <pre><code>containers=$(jq -n --arg image_name \"$image_name\" \\\n    --arg aws_access_key_id \"$AWS_ACCESS_KEY_ID\" \\\n    --arg aws_secret_access_key \"$AWS_SECRET_ACCESS_KEY\" \\\n    --arg client_id \"$CLIENT_ID\" \\\n    --arg client_secret \"$CLIENT_SECRET\" \\\n    --arg client_scope \"$CLIENT_SCOPE\" \\\n    --arg default_servers \"$DEFAULT_SERVERS\" \\\n    --arg server_client_id \"$SERVER_CLIENT_ID\" \\\n    --arg server_secret \"$SERVER_SECRET\" '{\n    \"flask\": {\n        \"image\": $image_name,\n        \"ports\": {\n            \"8000\": \"HTTP\"\n        },\n        \"environment\": {\n            \"AWS_ACCESS_KEY_ID\": $aws_access_key_id,\n            \"AWS_SECRET_ACCESS_KEY\": $aws_secret_access_key,\n            \"CLIENT_ID\": $client_id,\n            \"CLIENT_SECRET\": $client_secret,\n            \"CLIENT_SCOPE\": $client_scope,\n            \"DEFAULT_SERVERS\": $default_servers,\n            \"SERVER_CLIENT_ID\": $server_client_id,\n            \"SERVER_SECRET\": $server_secret\n        }\n    }\n}')\n\n\npublic_endpoint=$(jq -n '{\n    \"containerName\": \"flask\",\n    \"containerPort\": 8000\n}')\n\naws lightsail create-container-service-deployment --region us-east-1 \\\n    --service-name $SERVICE_NAME \\\n    --containers \"$containers\" \\\n    --public-endpoint \"$public_endpoint\"\n</code></pre> </li> </ol>"}]}